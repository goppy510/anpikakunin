generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EarthquakeEventLog {
  id          Int      @id @default(autoincrement())
  eventId     String   @map("event_id")
  payloadHash String   @map("payload_hash")
  source      String
  payload     Json
  fetchedAt   DateTime @default(now()) @map("fetched_at")

  @@map("earthquake_event_logs")
  @@unique([eventId, payloadHash], map: "earthquake_event_logs_event_id_payload_hash_key")
  @@index([eventId], map: "idx_earthquake_event_logs_event_id")
}

model SlackWorkspace {
  id                 String                     @id @default(uuid())
  workspaceId        String                     @unique @map("workspace_id")
  name               String
  botTokenCiphertext String                     @map("bot_token_ciphertext") // base64 encoded
  botTokenIv         String                     @map("bot_token_iv")         // base64 encoded
  botTokenTag        String                     @map("bot_token_tag")        // base64 encoded
  isEnabled          Boolean                    @default(true) @map("is_enabled")
  createdAt          DateTime                   @default(now()) @map("created_at")
  updatedAt          DateTime                   @updatedAt @map("updated_at")
  notificationSettings SlackNotificationSetting?

  @@map("slack_workspaces")
  @@index([workspaceId], map: "idx_slack_workspaces_workspace_id")
}

model SlackNotificationSetting {
  id                  String          @id @default(uuid())
  workspaceRef        String          @unique @map("workspace_ref")
  workspace           SlackWorkspace  @relation(fields: [workspaceRef], references: [id], onDelete: Cascade)
  minIntensity        String?         @map("min_intensity")
  targetPrefectures   String[]        @map("target_prefectures")
  notificationChannels Json?          @map("notification_channels")
  extraSettings       Json?           @map("extra_settings")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")

  @@map("slack_notification_settings")
}

// 認証・認可システム

enum UserRole {
  ADMIN  // 管理者権限: すべての設定可能
  EDITOR // 設定権限: 地震通知設定のみ
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String?   @map("password_hash") // null = 未設定（招待中）
  role          UserRole  @default(EDITOR)
  isActive      Boolean   @default(true) @map("is_active")
  emailVerified Boolean   @default(false) @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // リレーション
  sessions      Session[]
  otpCodes      OtpCode[]
  invitationsSent UserInvitation[] @relation("InviterRelation")

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
  @@index([token])
}

model OtpCode {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  code      String   // 6桁数字
  expiresAt DateTime @map("expires_at") // 5分後
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
  @@index([userId])
  @@index([code, expiresAt])
}

model UserInvitation {
  id         String    @id @default(uuid())
  email      String
  invitedBy  String    @map("invited_by")
  token      String    @unique
  role       UserRole  @default(EDITOR)
  expiresAt  DateTime  @map("expires_at") // 7日後
  acceptedAt DateTime? @map("accepted_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  inviter    User      @relation("InviterRelation", fields: [invitedBy], references: [id])

  @@map("user_invitations")
  @@index([email])
  @@index([token])
}
